# Unlike other extensions, functions from this module are not pointers.

module GL_VERSION_1_0
  module Compatibility
    Functions = {
      def glAccum(op, value) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glAlphaFunc(func, ref) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glBegin(mode) end => [ :void, :GLenum ].freeze,
      def glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) end => [ :void, :GLsizei, :GLsizei, :GLfloat, :GLfloat, :GLfloat, :GLfloat, :pointer ].freeze,
      def glCallList(list) end => [ :void, :GLuint ].freeze,
      def glCallLists(n, type, lists) end => [ :void, :GLsizei, :GLenum, :pointer ].freeze,
      def glClearAccum(red, green, blue, alpha) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glClearIndex(c) end => [ :void, :GLfloat ].freeze,
      def glClipPlane(plane, equation) end => [ :void, :GLenum, :pointer ].freeze,
      def glColor3b(red, green, blue) end => [ :void, :GLbyte, :GLbyte, :GLbyte ].freeze,
      def glColor3bv(v) end => [ :void, :pointer ].freeze,
      def glColor3d(red, green, blue) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glColor3dv(v) end => [ :void, :pointer ].freeze,
      def glColor3f(red, green, blue) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glColor3fv(v) end => [ :void, :pointer ].freeze,
      def glColor3i(red, green, blue) end => [ :void, :GLint, :GLint, :GLint ].freeze,
      def glColor3iv(v) end => [ :void, :pointer ].freeze,
      def glColor3s(red, green, blue) end => [ :void, :GLshort, :GLshort, :GLshort ].freeze,
      def glColor3sv(v) end => [ :void, :pointer ].freeze,
      def glColor3ub(red, green, blue) end => [ :void, :GLubyte, :GLubyte, :GLubyte ].freeze,
      def glColor3ubv(v) end => [ :void, :pointer ].freeze,
      def glColor3ui(red, green, blue) end => [ :void, :GLuint, :GLuint, :GLuint ].freeze,
      def glColor3uiv(v) end => [ :void, :pointer ].freeze,
      def glColor3us(red, green, blue) end => [ :void, :GLushort, :GLushort, :GLushort ].freeze,
      def glColor3usv(v) end => [ :void, :pointer ].freeze,
      def glColor4b(red, green, blue, alpha) end => [ :void, :GLbyte, :GLbyte, :GLbyte, :GLbyte ].freeze,
      def glColor4bv(v) end => [ :void, :pointer ].freeze,
      def glColor4d(red, green, blue, alpha) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glColor4dv(v) end => [ :void, :pointer ].freeze,
      def glColor4f(red, green, blue, alpha) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glColor4fv(v) end => [ :void, :pointer ].freeze,
      def glColor4i(red, green, blue, alpha) end => [ :void, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glColor4iv(v) end => [ :void, :pointer ].freeze,
      def glColor4s(red, green, blue, alpha) end => [ :void, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glColor4sv(v) end => [ :void, :pointer ].freeze,
      def glColor4ub(red, green, blue, alpha) end => [ :void, :GLubyte, :GLubyte, :GLubyte, :GLubyte ].freeze,
      def glColor4ubv(v) end => [ :void, :pointer ].freeze,
      def glColor4ui(red, green, blue, alpha) end => [ :void, :GLuint, :GLuint, :GLuint, :GLuint ].freeze,
      def glColor4uiv(v) end => [ :void, :pointer ].freeze,
      def glColor4us(red, green, blue, alpha) end => [ :void, :GLushort, :GLushort, :GLushort, :GLushort ].freeze,
      def glColor4usv(v) end => [ :void, :pointer ].freeze,
      def glColorMaterial(face, mode) end => [ :void, :GLenum, :GLenum ].freeze,
      def glCopyPixels(x, y, width, height, type) end => [ :void, :GLint, :GLint, :GLsizei, :GLsizei, :GLenum ].freeze,
      def glDeleteLists(list, range) end => [ :void, :GLuint, :GLsizei ].freeze,
      def glDrawPixels(width, height, format, type, pixels) end => [ :void, :GLsizei, :GLsizei, :GLenum, :GLenum, :pointer ].freeze,
      def glEdgeFlag(flag) end => [ :void, :GLboolean ].freeze,
      def glEdgeFlagv(flag) end => [ :void, :pointer ].freeze,
      def glEnd() end => [ :void ].freeze,
      def glEndList() end => [ :void ].freeze,
      def glEvalCoord1d(u) end => [ :void, :GLdouble ].freeze,
      def glEvalCoord1dv(u) end => [ :void, :pointer ].freeze,
      def glEvalCoord1f(u) end => [ :void, :GLfloat ].freeze,
      def glEvalCoord1fv(u) end => [ :void, :pointer ].freeze,
      def glEvalCoord2d(u, v) end => [ :void, :GLdouble, :GLdouble ].freeze,
      def glEvalCoord2dv(u) end => [ :void, :pointer ].freeze,
      def glEvalCoord2f(u, v) end => [ :void, :GLfloat, :GLfloat ].freeze,
      def glEvalCoord2fv(u) end => [ :void, :pointer ].freeze,
      def glEvalMesh1(mode, i1, i2) end => [ :void, :GLenum, :GLint, :GLint ].freeze,
      def glEvalMesh2(mode, i1, i2, j1, j2) end => [ :void, :GLenum, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glEvalPoint1(i) end => [ :void, :GLint ].freeze,
      def glEvalPoint2(i, j) end => [ :void, :GLint, :GLint ].freeze,
      def glFeedbackBuffer(size, type, buffer) end => [ :void, :GLsizei, :GLenum, :pointer ].freeze,
      def glFogf(pname, param) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glFogfv(pname, params) end => [ :void, :GLenum, :pointer ].freeze,
      def glFogi(pname, param) end => [ :void, :GLenum, :GLint ].freeze,
      def glFogiv(pname, params) end => [ :void, :GLenum, :pointer ].freeze,
      def glFrustum(left, right, bottom, top, zNear, zFar) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glGenLists(range) end => [ :GLuint, :GLsizei ].freeze,
      def glGetClipPlane(plane, equation) end => [ :void, :GLenum, :pointer ].freeze,
      def glGetLightfv(light, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetLightiv(light, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetMapdv(target, query, v) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetMapfv(target, query, v) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetMapiv(target, query, v) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetMaterialfv(face, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetMaterialiv(face, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetPixelMapfv(map, values) end => [ :void, :GLenum, :pointer ].freeze,
      def glGetPixelMapuiv(map, values) end => [ :void, :GLenum, :pointer ].freeze,
      def glGetPixelMapusv(map, values) end => [ :void, :GLenum, :pointer ].freeze,
      def glGetPolygonStipple(mask) end => [ :void, :pointer ].freeze,
      def glGetTexEnvfv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetTexEnviv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetTexGenfv(coord, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glGetTexGeniv(coord, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glIndexMask(mask) end => [ :void, :GLuint ].freeze,
      def glIndexd(c) end => [ :void, :GLdouble ].freeze,
      def glIndexdv(c) end => [ :void, :pointer ].freeze,
      def glIndexf(c) end => [ :void, :GLfloat ].freeze,
      def glIndexfv(c) end => [ :void, :pointer ].freeze,
      def glIndexi(c) end => [ :void, :GLint ].freeze,
      def glIndexiv(c) end => [ :void, :pointer ].freeze,
      def glIndexs(c) end => [ :void, :GLshort ].freeze,
      def glIndexsv(c) end => [ :void, :pointer ].freeze,
      def glInitNames() end => [ :void ].freeze,
      def glIsList(list) end => [ :GLboolean, :GLuint ].freeze,
      def glLightModelf(pname, param) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glLightModelfv(pname, params) end => [ :void, :GLenum, :pointer ].freeze,
      def glLightModeli(pname, param) end => [ :void, :GLenum, :GLint ].freeze,
      def glLightModeliv(pname, params) end => [ :void, :GLenum, :pointer ].freeze,
      def glLightf(light, pname, param) end => [ :void, :GLenum, :GLenum, :GLfloat ].freeze,
      def glLightfv(light, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glLighti(light, pname, param) end => [ :void, :GLenum, :GLenum, :GLint ].freeze,
      def glLightiv(light, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glLineStipple(factor, pattern) end => [ :void, :GLint, :GLushort ].freeze,
      def glListBase(base) end => [ :void, :GLuint ].freeze,
      def glLoadIdentity() end => [ :void ].freeze,
      def glLoadMatrixd(m) end => [ :void, :pointer ].freeze,
      def glLoadMatrixf(m) end => [ :void, :pointer ].freeze,
      def glLoadName(name) end => [ :void, :GLuint ].freeze,
      def glMap1d(target, u1, u2, stride, order, points) end => [ :void, :GLenum, :GLdouble, :GLdouble, :GLint, :GLint, :pointer ].freeze,
      def glMap1f(target, u1, u2, stride, order, points) end => [ :void, :GLenum, :GLfloat, :GLfloat, :GLint, :GLint, :pointer ].freeze,
      def glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) end => [ :void, :GLenum, :GLdouble, :GLdouble, :GLint, :GLint, :GLdouble, :GLdouble, :GLint, :GLint, :pointer ].freeze,
      def glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) end => [ :void, :GLenum, :GLfloat, :GLfloat, :GLint, :GLint, :GLfloat, :GLfloat, :GLint, :GLint, :pointer ].freeze,
      def glMaterialf(face, pname, param) end => [ :void, :GLenum, :GLenum, :GLfloat ].freeze,
      def glMaterialfv(face, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glMateriali(face, pname, param) end => [ :void, :GLenum, :GLenum, :GLint ].freeze,
      def glMaterialiv(face, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glMatrixMode(mode) end => [ :void, :GLenum ].freeze,
      def glMultMatrixd(m) end => [ :void, :pointer ].freeze,
      def glMultMatrixf(m) end => [ :void, :pointer ].freeze,
      def glNewList(list, mode) end => [ :void, :GLuint, :GLenum ].freeze,
      def glNormal3b(nx, ny, nz) end => [ :void, :GLbyte, :GLbyte, :GLbyte ].freeze,
      def glNormal3bv(v) end => [ :void, :pointer ].freeze,
      def glNormal3d(nx, ny, nz) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glNormal3dv(v) end => [ :void, :pointer ].freeze,
      def glNormal3f(nx, ny, nz) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glNormal3fv(v) end => [ :void, :pointer ].freeze,
      def glNormal3i(nx, ny, nz) end => [ :void, :GLint, :GLint, :GLint ].freeze,
      def glNormal3iv(v) end => [ :void, :pointer ].freeze,
      def glNormal3s(nx, ny, nz) end => [ :void, :GLshort, :GLshort, :GLshort ].freeze,
      def glNormal3sv(v) end => [ :void, :pointer ].freeze,
      def glOrtho(left, right, bottom, top, zNear, zFar) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glPassThrough(token) end => [ :void, :GLfloat ].freeze,
      def glPixelMapfv(map, mapsize, values) end => [ :void, :GLenum, :GLsizei, :pointer ].freeze,
      def glPixelMapuiv(map, mapsize, values) end => [ :void, :GLenum, :GLsizei, :pointer ].freeze,
      def glPixelMapusv(map, mapsize, values) end => [ :void, :GLenum, :GLsizei, :pointer ].freeze,
      def glPixelTransferf(pname, param) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glPixelTransferi(pname, param) end => [ :void, :GLenum, :GLint ].freeze,
      def glPixelZoom(xfactor, yfactor) end => [ :void, :GLfloat, :GLfloat ].freeze,
      def glPolygonStipple(mask) end => [ :void, :pointer ].freeze,
      def glPopAttrib() end => [ :void ].freeze,
      def glPopMatrix() end => [ :void ].freeze,
      def glPopName() end => [ :void ].freeze,
      def glPushAttrib(mask) end => [ :void, :GLbitfield ].freeze,
      def glPushMatrix() end => [ :void ].freeze,
      def glPushName(name) end => [ :void, :GLuint ].freeze,
      def glRasterPos2d(x, y) end => [ :void, :GLdouble, :GLdouble ].freeze,
      def glRasterPos2dv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos2f(x, y) end => [ :void, :GLfloat, :GLfloat ].freeze,
      def glRasterPos2fv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos2i(x, y) end => [ :void, :GLint, :GLint ].freeze,
      def glRasterPos2iv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos2s(x, y) end => [ :void, :GLshort, :GLshort ].freeze,
      def glRasterPos2sv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos3d(x, y, z) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glRasterPos3dv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos3f(x, y, z) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glRasterPos3fv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos3i(x, y, z) end => [ :void, :GLint, :GLint, :GLint ].freeze,
      def glRasterPos3iv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos3s(x, y, z) end => [ :void, :GLshort, :GLshort, :GLshort ].freeze,
      def glRasterPos3sv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos4d(x, y, z, w) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glRasterPos4dv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos4f(x, y, z, w) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glRasterPos4fv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos4i(x, y, z, w) end => [ :void, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glRasterPos4iv(v) end => [ :void, :pointer ].freeze,
      def glRasterPos4s(x, y, z, w) end => [ :void, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glRasterPos4sv(v) end => [ :void, :pointer ].freeze,
      def glRectd(x1, y1, x2, y2) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glRectdv(v1, v2) end => [ :void, :pointer, :pointer ].freeze,
      def glRectf(x1, y1, x2, y2) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glRectfv(v1, v2) end => [ :void, :pointer, :pointer ].freeze,
      def glRecti(x1, y1, x2, y2) end => [ :void, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glRectiv(v1, v2) end => [ :void, :pointer, :pointer ].freeze,
      def glRects(x1, y1, x2, y2) end => [ :void, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glRectsv(v1, v2) end => [ :void, :pointer, :pointer ].freeze,
      def glRenderMode(mode) end => [ :GLint, :GLenum ].freeze,
      def glRotated(angle, x, y, z) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glRotatef(angle, x, y, z) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glScaled(x, y, z) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glScalef(x, y, z) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glSelectBuffer(size, buffer) end => [ :void, :GLsizei, :pointer ].freeze,
      def glShadeModel(mode) end => [ :void, :GLenum ].freeze,
      def glTexCoord1d(s) end => [ :void, :GLdouble ].freeze,
      def glTexCoord1dv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord1f(s) end => [ :void, :GLfloat ].freeze,
      def glTexCoord1fv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord1i(s) end => [ :void, :GLint ].freeze,
      def glTexCoord1iv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord1s(s) end => [ :void, :GLshort ].freeze,
      def glTexCoord1sv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord2d(s, t) end => [ :void, :GLdouble, :GLdouble ].freeze,
      def glTexCoord2dv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord2f(s, t) end => [ :void, :GLfloat, :GLfloat ].freeze,
      def glTexCoord2fv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord2i(s, t) end => [ :void, :GLint, :GLint ].freeze,
      def glTexCoord2iv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord2s(s, t) end => [ :void, :GLshort, :GLshort ].freeze,
      def glTexCoord2sv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord3d(s, t, r) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glTexCoord3dv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord3f(s, t, r) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glTexCoord3fv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord3i(s, t, r) end => [ :void, :GLint, :GLint, :GLint ].freeze,
      def glTexCoord3iv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord3s(s, t, r) end => [ :void, :GLshort, :GLshort, :GLshort ].freeze,
      def glTexCoord3sv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord4d(s, t, r, q) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glTexCoord4dv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord4f(s, t, r, q) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glTexCoord4fv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord4i(s, t, r, q) end => [ :void, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glTexCoord4iv(v) end => [ :void, :pointer ].freeze,
      def glTexCoord4s(s, t, r, q) end => [ :void, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glTexCoord4sv(v) end => [ :void, :pointer ].freeze,
      def glTexEnvf(target, pname, param) end => [ :void, :GLenum, :GLenum, :GLfloat ].freeze,
      def glTexEnvfv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glTexEnvi(target, pname, param) end => [ :void, :GLenum, :GLenum, :GLint ].freeze,
      def glTexEnviv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glTexGend(coord, pname, param) end => [ :void, :GLenum, :GLenum, :GLdouble ].freeze,
      def glTexGendv(coord, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glTexGenf(coord, pname, param) end => [ :void, :GLenum, :GLenum, :GLfloat ].freeze,
      def glTexGenfv(coord, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glTexGeni(coord, pname, param) end => [ :void, :GLenum, :GLenum, :GLint ].freeze,
      def glTexGeniv(coord, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
      def glTranslated(x, y, z) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glTranslatef(x, y, z) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glVertex2d(x, y) end => [ :void, :GLdouble, :GLdouble ].freeze,
      def glVertex2dv(v) end => [ :void, :pointer ].freeze,
      def glVertex2f(x, y) end => [ :void, :GLfloat, :GLfloat ].freeze,
      def glVertex2fv(v) end => [ :void, :pointer ].freeze,
      def glVertex2i(x, y) end => [ :void, :GLint, :GLint ].freeze,
      def glVertex2iv(v) end => [ :void, :pointer ].freeze,
      def glVertex2s(x, y) end => [ :void, :GLshort, :GLshort ].freeze,
      def glVertex2sv(v) end => [ :void, :pointer ].freeze,
      def glVertex3d(x, y, z) end => [ :void, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glVertex3dv(v) end => [ :void, :pointer ].freeze,
      def glVertex3f(x, y, z) end => [ :void, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glVertex3fv(v) end => [ :void, :pointer ].freeze,
      def glVertex3i(x, y, z) end => [ :void, :GLint, :GLint, :GLint ].freeze,
      def glVertex3iv(v) end => [ :void, :pointer ].freeze,
      def glVertex3s(x, y, z) end => [ :void, :GLshort, :GLshort, :GLshort ].freeze,
      def glVertex3sv(v) end => [ :void, :pointer ].freeze,
      def glVertex4d(x, y, z, w) end => [ :void, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glVertex4dv(v) end => [ :void, :pointer ].freeze,
      def glVertex4f(x, y, z, w) end => [ :void, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glVertex4fv(v) end => [ :void, :pointer ].freeze,
      def glVertex4i(x, y, z, w) end => [ :void, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glVertex4iv(v) end => [ :void, :pointer ].freeze,
      def glVertex4s(x, y, z, w) end => [ :void, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glVertex4sv(v) end => [ :void, :pointer ].freeze,
    }.freeze
  end
end