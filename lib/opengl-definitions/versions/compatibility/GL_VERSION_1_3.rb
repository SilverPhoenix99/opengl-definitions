module GL_VERSION_1_3
  module Compatibility
    Functions = {
      def glClientActiveTexture(texture) end => [ :void, :GLenum ].freeze,
      def glLoadTransposeMatrixd(m) end => [ :void, :pointer ].freeze,
      def glLoadTransposeMatrixf(m) end => [ :void, :pointer ].freeze,
      def glMultTransposeMatrixd(m) end => [ :void, :pointer ].freeze,
      def glMultTransposeMatrixf(m) end => [ :void, :pointer ].freeze,
      def glMultiTexCoord1d(target, s) end => [ :void, :GLenum, :GLdouble ].freeze,
      def glMultiTexCoord1dv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord1f(target, s) end => [ :void, :GLenum, :GLfloat ].freeze,
      def glMultiTexCoord1fv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord1i(target, s) end => [ :void, :GLenum, :GLint ].freeze,
      def glMultiTexCoord1iv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord1s(target, s) end => [ :void, :GLenum, :GLshort ].freeze,
      def glMultiTexCoord1sv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord2d(target, s, t) end => [ :void, :GLenum, :GLdouble, :GLdouble ].freeze,
      def glMultiTexCoord2dv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord2f(target, s, t) end => [ :void, :GLenum, :GLfloat, :GLfloat ].freeze,
      def glMultiTexCoord2fv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord2i(target, s, t) end => [ :void, :GLenum, :GLint, :GLint ].freeze,
      def glMultiTexCoord2iv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord2s(target, s, t) end => [ :void, :GLenum, :GLshort, :GLshort ].freeze,
      def glMultiTexCoord2sv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord3d(target, s, t, r) end => [ :void, :GLenum, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glMultiTexCoord3dv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord3f(target, s, t, r) end => [ :void, :GLenum, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glMultiTexCoord3fv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord3i(target, s, t, r) end => [ :void, :GLenum, :GLint, :GLint, :GLint ].freeze,
      def glMultiTexCoord3iv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord3s(target, s, t, r) end => [ :void, :GLenum, :GLshort, :GLshort, :GLshort ].freeze,
      def glMultiTexCoord3sv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord4d(target, s, t, r, q) end => [ :void, :GLenum, :GLdouble, :GLdouble, :GLdouble, :GLdouble ].freeze,
      def glMultiTexCoord4dv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord4f(target, s, t, r, q) end => [ :void, :GLenum, :GLfloat, :GLfloat, :GLfloat, :GLfloat ].freeze,
      def glMultiTexCoord4fv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord4i(target, s, t, r, q) end => [ :void, :GLenum, :GLint, :GLint, :GLint, :GLint ].freeze,
      def glMultiTexCoord4iv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
      def glMultiTexCoord4s(target, s, t, r, q) end => [ :void, :GLenum, :GLshort, :GLshort, :GLshort, :GLshort ].freeze,
      def glMultiTexCoord4sv(target, v) end => [ :void, :GLenum, :pointer ].freeze,
    }.freeze
  end
end