# Note: this version includes only a subset of functions from extension GL_ARB_uniform_buffer_object

module GL_VERSION_3_0
  module Constants
    ALPHA_INTEGER                                 = 0x8D97
    BGR_INTEGER                                   = 0x8D9A
    BGRA_INTEGER                                  = 0x8D9B
    BLUE_INTEGER                                  = 0x8D96
    CLAMP_FRAGMENT_COLOR                          = 0x891B
    CLAMP_READ_COLOR                              = 0x891C
    CLAMP_VERTEX_COLOR                            = 0x891A
    CLIP_DISTANCE0                                = 0x3000
    CLIP_DISTANCE1                                = 0x3001
    CLIP_DISTANCE2                                = 0x3002
    CLIP_DISTANCE3                                = 0x3003
    CLIP_DISTANCE4                                = 0x3004
    CLIP_DISTANCE5                                = 0x3005
    COMPARE_R_TO_TEXTURE_ARB                      = 0x884E
    COMPARE_REF_TO_TEXTURE                        = COMPARE_R_TO_TEXTURE_ARB
    COMPRESSED_RED                                = 0x8225
    COMPRESSED_RG                                 = 0x8226
    CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT           = 0x0001
    CONTEXT_FLAGS                                 = 0x821E
    DEPTH_BUFFER                                  = 0x8223
    FIXED_ONLY                                    = 0x891D
    GREEN_INTEGER                                 = 0x8D95
    INT_SAMPLER_1D                                = 0x8DC9
    INT_SAMPLER_1D_ARRAY                          = 0x8DCE
    INT_SAMPLER_2D                                = 0x8DCA
    INT_SAMPLER_2D_ARRAY                          = 0x8DCF
    INT_SAMPLER_3D                                = 0x8DCB
    INT_SAMPLER_CUBE                              = 0x8DCC
    INTERLEAVED_ATTRIBS                           = 0x8C8C
    MAJOR_VERSION                                 = 0x821B
    MAX_ARRAY_TEXTURE_LAYERS                      = 0x88FF
    MAX_CLIP_DISTANCES                            = 0x0D32
    MAX_PROGRAM_TEXEL_OFFSET                      = 0x8905
    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A
    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = 0x8C8B
    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = 0x8C80
    MAX_VARYING_COMPONENTS                        = 0x8B4B
    MIN_PROGRAM_TEXEL_OFFSET                      = 0x8904
    MINOR_VERSION                                 = 0x821C
    NUM_EXTENSIONS                                = 0x821D
    PRIMITIVES_GENERATED                          = 0x8C87
    PROXY_TEXTURE_1D_ARRAY                        = 0x8C19
    PROXY_TEXTURE_2D_ARRAY                        = 0x8C1B
    QUERY_BY_REGION_NO_WAIT                       = 0x8E16
    QUERY_BY_REGION_WAIT                          = 0x8E15
    QUERY_NO_WAIT                                 = 0x8E14
    QUERY_WAIT                                    = 0x8E13
    R11F_G11F_B10F                                = 0x8C3A
    RASTERIZER_DISCARD                            = 0x8C89
    RED_INTEGER                                   = 0x8D94
    RGB_INTEGER                                   = 0x8D98
    RGB16F                                        = 0x881B
    RGB16I                                        = 0x8D89
    RGB16UI                                       = 0x8D77
    RGB32F                                        = 0x8815
    RGB32I                                        = 0x8D83
    RGB32UI                                       = 0x8D71
    RGB8I                                         = 0x8D8F
    RGB8UI                                        = 0x8D7D
    RGB9_E5                                       = 0x8C3D
    RGBA_INTEGER                                  = 0x8D99
    RGBA16F                                       = 0x881A
    RGBA16I                                       = 0x8D88
    RGBA16UI                                      = 0x8D76
    RGBA32F                                       = 0x8814
    RGBA32I                                       = 0x8D82
    RGBA32UI                                      = 0x8D70
    RGBA8I                                        = 0x8D8E
    RGBA8UI                                       = 0x8D7C
    SAMPLER_1D_ARRAY                              = 0x8DC0
    SAMPLER_1D_ARRAY_SHADOW                       = 0x8DC3
    SAMPLER_2D_ARRAY                              = 0x8DC1
    SAMPLER_2D_ARRAY_SHADOW                       = 0x8DC4
    SAMPLER_CUBE_SHADOW                           = 0x8DC5
    SEPARATE_ATTRIBS                              = 0x8C8D
    STENCIL_BUFFER                                = 0x8224
    TEXTURE_1D_ARRAY                              = 0x8C18
    TEXTURE_2D_ARRAY                              = 0x8C1A
    TEXTURE_ALPHA_TYPE                            = 0x8C13
    TEXTURE_BINDING_1D_ARRAY                      = 0x8C1C
    TEXTURE_BINDING_2D_ARRAY                      = 0x8C1D
    TEXTURE_BLUE_TYPE                             = 0x8C12
    TEXTURE_DEPTH_TYPE                            = 0x8C16
    TEXTURE_GREEN_TYPE                            = 0x8C11
    TEXTURE_INTENSITY_TYPE                        = 0x8C15
    TEXTURE_LUMINANCE_TYPE                        = 0x8C14
    TEXTURE_RED_TYPE                              = 0x8C10
    TEXTURE_SHARED_SIZE                           = 0x8C3F
    TRANSFORM_FEEDBACK_BUFFER                     = 0x8C8E
    TRANSFORM_FEEDBACK_BUFFER_BINDING             = 0x8C8F
    TRANSFORM_FEEDBACK_BUFFER_MODE                = 0x8C7F
    TRANSFORM_FEEDBACK_BUFFER_SIZE                = 0x8C85
    TRANSFORM_FEEDBACK_BUFFER_START               = 0x8C84
    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = 0x8C88
    TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH         = 0x8C76
    TRANSFORM_FEEDBACK_VARYINGS                   = 0x8C83
    UNSIGNED_INT_10F_11F_11F_REV                  = 0x8C3B
    UNSIGNED_INT_5_9_9_9_REV                      = 0x8C3E
    UNSIGNED_INT_SAMPLER_1D                       = 0x8DD1
    UNSIGNED_INT_SAMPLER_1D_ARRAY                 = 0x8DD6
    UNSIGNED_INT_SAMPLER_2D                       = 0x8DD2
    UNSIGNED_INT_SAMPLER_2D_ARRAY                 = 0x8DD7
    UNSIGNED_INT_SAMPLER_3D                       = 0x8DD3
    UNSIGNED_INT_SAMPLER_CUBE                     = 0x8DD4
    UNSIGNED_INT_VEC2                             = 0x8DC6
    UNSIGNED_INT_VEC3                             = 0x8DC7
    UNSIGNED_INT_VEC4                             = 0x8DC8
    VERTEX_ATTRIB_ARRAY_INTEGER                   = 0x88FD
  end

  Extensions = [
    :GL_ARB_framebuffer_object,
    :GL_ARB_map_buffer_range,
    :GL_ARB_vertex_array_object
  ].freeze

  Functions = {
    def glBeginConditionalRender(id, mode) end => [ :void, :GLuint, :GLenum ].freeze,
    def glBeginTransformFeedback(primitiveMode) end => [ :void, :GLenum ].freeze,
    def glBindFragDataLocation(program, color, name) end => [ :void, :GLuint, :GLuint, :string ].freeze,
    def glClampColor(target, clamp) end => [ :void, :GLenum, :GLenum ].freeze,
    def glClearBufferfi(buffer, drawbuffer, depth, stencil) end => [ :void, :GLenum, :GLint, :GLfloat, :GLint ].freeze,
    def glClearBufferfv(buffer, drawbuffer, value) end => [ :void, :GLenum, :GLint, :pointer ].freeze,
    def glClearBufferiv(buffer, drawbuffer, value) end => [ :void, :GLenum, :GLint, :pointer ].freeze,
    def glClearBufferuiv(buffer, drawbuffer, value) end => [ :void, :GLenum, :GLint, :pointer ].freeze,
    def glColorMaski(index, r, g, b, a) end => [ :void, :GLuint, :GLboolean, :GLboolean, :GLboolean, :GLboolean ].freeze,
    def glDisablei(target, index) end => [ :void, :GLenum, :GLuint ].freeze,
    def glEnablei(target, index) end => [ :void, :GLenum, :GLuint ].freeze,
    def glEndConditionalRender() end => [ :void ].freeze,
    def glEndTransformFeedback() end => [ :void ].freeze,
    def glGetBooleani_v(target, index, data) end => [ :void, :GLenum, :GLuint, :pointer ].freeze,
    def glGetFragDataLocation(program, name) end => [ :GLint, :GLuint, :string ].freeze,
    def glGetStringi(name, index) end => [ :string, :GLenum, :GLuint ].freeze,
    def glGetTexParameterIiv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
    def glGetTexParameterIuiv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
    def glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) end => [ :void, :GLuint, :GLuint, :GLsizei, :pointer, :pointer, :pointer, :string ].freeze,
    def glGetUniformuiv(program, location, params) end => [ :void, :GLuint, :GLint, :pointer ].freeze,
    def glGetVertexAttribIiv(index, pname, params) end => [ :void, :GLuint, :GLenum, :pointer ].freeze,
    def glGetVertexAttribIuiv(index, pname, params) end => [ :void, :GLuint, :GLenum, :pointer ].freeze,
    def glIsEnabledi(target, index) end => [ :GLboolean, :GLenum, :GLuint ].freeze,
    def glTexParameterIiv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
    def glTexParameterIuiv(target, pname, params) end => [ :void, :GLenum, :GLenum, :pointer ].freeze,
    def glTransformFeedbackVaryings(program, count, varyings, bufferMode) end => [ :void, :GLuint, :GLsizei, :pointer, :GLenum ].freeze,
    def glUniform1ui(location, v0) end => [ :void, :GLint, :GLuint ].freeze,
    def glUniform1uiv(location, count, value) end => [ :void, :GLint, :GLsizei, :pointer ].freeze,
    def glUniform2ui(location, v0, v1) end => [ :void, :GLint, :GLuint, :GLuint ].freeze,
    def glUniform2uiv(location, count, value) end => [ :void, :GLint, :GLsizei, :pointer ].freeze,
    def glUniform3ui(location, v0, v1, v2) end => [ :void, :GLint, :GLuint, :GLuint, :GLuint ].freeze,
    def glUniform3uiv(location, count, value) end => [ :void, :GLint, :GLsizei, :pointer ].freeze,
    def glUniform4ui(location, v0, v1, v2, v3) end => [ :void, :GLint, :GLuint, :GLuint, :GLuint, :GLuint ].freeze,
    def glUniform4uiv(location, count, value) end => [ :void, :GLint, :GLsizei, :pointer ].freeze,
    def glVertexAttribI1i(index, x) end => [ :void, :GLuint, :GLint ].freeze,
    def glVertexAttribI1iv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI1ui(index, x) end => [ :void, :GLuint, :GLuint ].freeze,
    def glVertexAttribI1uiv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI2i(index, x, y) end => [ :void, :GLuint, :GLint, :GLint ].freeze,
    def glVertexAttribI2iv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI2ui(index, x, y) end => [ :void, :GLuint, :GLuint, :GLuint ].freeze,
    def glVertexAttribI2uiv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI3i(index, x, y, z) end => [ :void, :GLuint, :GLint, :GLint, :GLint ].freeze,
    def glVertexAttribI3iv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI3ui(index, x, y, z) end => [ :void, :GLuint, :GLuint, :GLuint, :GLuint ].freeze,
    def glVertexAttribI3uiv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4bv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4i(index, x, y, z, w) end => [ :void, :GLuint, :GLint, :GLint, :GLint, :GLint ].freeze,
    def glVertexAttribI4iv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4sv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4ubv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4ui(index, x, y, z, w) end => [ :void, :GLuint, :GLuint, :GLuint, :GLuint, :GLuint ].freeze,
    def glVertexAttribI4uiv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribI4usv(index, v) end => [ :void, :GLuint, :pointer ].freeze,
    def glVertexAttribIPointer(index, size, type, stride, pointer) end => [ :void, :GLuint, :GLint, :GLenum, :GLsizei, :pointer ].freeze,
  }.freeze
end